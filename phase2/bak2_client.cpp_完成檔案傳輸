#include <iostream>
#include <string>
#include <cstring>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <fstream>
#include <experimental/filesystem>
#include <algorithm>

#define CHUNCK_SIZE (4 * 1024 * 1024)

int main()
{
    // 建立客戶端的 socket
    int client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket == -1)
    {
        std::cerr << "Failed to create socket" << std::endl;
        return 1;
    }

    // 設定伺服器地址結構
    sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;                       // 使用 IPv4
    server_addr.sin_port = htons(48763);                    // 伺服器的端口
    inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr); // 伺服器的 IP 地址

    // 連接到伺服器
    if (connect(client_socket, (sockaddr *)&server_addr, sizeof(server_addr)) == -1)
    {
        std::cerr << "Failed to connect to server" << std::endl;
        return 1;
    }

    char ip_str[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &server_addr.sin_addr, ip_str, sizeof(ip_str));
    std::cout << "Connected to server at IP: " << ip_str << " and port: " << ntohs(server_addr.sin_port) << std::endl;

    char buffer[4096];
    std::string user_input;
    bool loggedIn = false;

    // 接收並顯示伺服器的歡迎訊息(選擇註冊或登入)
    memset(buffer, 0, 4096);
    int bytes_received = recv(client_socket, buffer, 4096, 0);
    if (bytes_received > 0)
    {
        std::cout << std::string(buffer, bytes_received) << std::endl;
    }

    // 選擇登入或註冊功能
    while (true)
    {
        // 選擇1. 註冊 2. 登入 9. 離開
        std::getline(std::cin, user_input); // std::getline(std::cin, user_input)代表將用戶輸入的內容存儲到 user_input 變數中, std::cin 代表標準鍵盤輸入
        send(client_socket, user_input.c_str(), user_input.size(), 0);

        if (user_input == "1" || user_input == "2") // 註冊 或 登入
        {
            // 接收並顯示伺服器的回應 std::cout << "請輸入用戶名: ";
            memset(buffer, 0, 4096);
            bytes_received = recv(client_socket, buffer, 4096, 0);
            if (bytes_received > 0)
            {
                std::cout << std::string(buffer, bytes_received) << std::endl;
            }
            std::getline(std::cin, user_input);
            send(client_socket, user_input.c_str(), user_input.size(), 0);

            // 接收並顯示伺服器的回應 std::cout << "請輸入密碼: ";
            memset(buffer, 0, 4096);
            bytes_received = recv(client_socket, buffer, 4096, 0);
            if (bytes_received > 0)
            {
                std::cout << std::string(buffer, bytes_received) << std::endl;
            }
            std::getline(std::cin, user_input);
            send(client_socket, user_input.c_str(), user_input.size(), 0);

            // 接收並顯示伺服器的回應 std::cout << "註冊/登入 成功/失敗！" ;
            memset(buffer, 0, 4096);
            bytes_received = recv(client_socket, buffer, 4096, 0);
            std::string response(buffer, bytes_received);
            if (bytes_received > 0)
            {
                std::cout << response << std::endl;
            }

            // 登入成功才跳出循環，就算註冊成功也不跳出。
            if (response.find("登入成功") != std::string::npos)
            {
                std::cout << "#########################################" << std::endl;
                loggedIn = true;
                break; // 登入成功，跳出循環
            }
        }

        else if (user_input == "9")
        {
            // 接收並顯示伺服器的回應 std::cout << "程式執行完畢！" << std::endl;
            memset(buffer, 0, 4096);
            bytes_received = recv(client_socket, buffer, 4096, 0);
            if (bytes_received > 0)
            {
                std::cout << std::string(buffer, bytes_received) << std::endl;
            }
            close(client_socket);
            return 0;
        }
        else // 未知選項
        {
            // 接收並顯示伺服器的回應 std::cout << "未知的選項，請重新輸入。" << std::endl;
            memset(buffer, 0, 4096);
            bytes_received = recv(client_socket, buffer, 4096, 0);
            if (bytes_received > 0)
            {
                std::cout << std::string(buffer, bytes_received) << std::endl;
            }
        }
    }

    // 登入後的功能選擇
    if (loggedIn)
    {

        while (true)
        {
            // 接收並顯示伺服器的功能選單
            memset(buffer, 0, 4096);
            bytes_received = recv(client_socket, buffer, 4096, 0);
            if (bytes_received > 0)
            {
                std::cout << std::string(buffer, bytes_received) << std::endl;
            }

            // 用戶選擇功能
            std::getline(std::cin, user_input);
            send(client_socket, user_input.c_str(), user_input.size(), 0);

            if (user_input == "1") // 1. 回聲
            {
                // 接收 "現正使用1. 回聲\n請輸入訊息: "
                memset(buffer, 0, 4096);
                bytes_received = recv(client_socket, buffer, 4096, 0);
                if (bytes_received > 0)
                {
                    std::cout << std::string(buffer, bytes_received) << std::endl;
                }

                // 輸入欲回聲的訊息
                std::getline(std::cin, user_input);
                send(client_socket, user_input.c_str(), user_input.size(), 0);

                // 接收並顯示伺服器的回聲
                memset(buffer, 0, 4096);
                bytes_received = recv(client_socket, buffer, 4096, 0);
                if (bytes_received > 0)
                {
                    std::cout << std::string(buffer, bytes_received) << std::endl;
                }

                // 如果發送的訊息為 "exit" 則跳出循環
                if (user_input == "exit")
                {
                    break;
                }
            }
            else if (user_input == "2") // 2. 傳送訊息給伺服器
            {
                // 接收 "現正使用2. 傳送訊息給伺服器\n請輸入訊息: "
                memset(buffer, 0, 4096);
                bytes_received = recv(client_socket, buffer, 4096, 0);
                if (bytes_received > 0)
                {
                    std::cout << std::string(buffer, bytes_received) << std::endl;
                }

                // 輸入欲傳送的訊息
                std::getline(std::cin, user_input);
                send(client_socket, user_input.c_str(), user_input.size(), 0);

                // 如果發送的訊息為 "exit" 則跳出循環
                if (user_input == "exit")
                {
                    break;
                }
            }
            else if (user_input == "3") // 3. 傳送文件給伺服器
            {
                // 接收 "現正使用3. 傳送文件給伺服器\n請輸入文件名: "
                memset(buffer, 0, 4096);
                bytes_received = recv(client_socket, buffer, 4096, 0);
                if (bytes_received > 0)
                {
                    std::cout << std::string(buffer, bytes_received) << std::endl;
                }

                // 輸入文件名
                std::getline(std::cin, user_input);
                // 去除前後的引號
                std::string processed_input = user_input;
                processed_input.erase(std::remove(processed_input.begin(), processed_input.end(), '\"'), processed_input.end());

                // 取得文件名
                std::experimental::filesystem::path file_path(processed_input);
                std::string file_name = file_path.filename().string();

                // 如果路徑為資料夾，則終止連線
                if (std::experimental::filesystem::is_directory(file_path))
                {
                    std::cerr << "無法傳送資料夾: " << processed_input << "終止連線" << std::endl;
                    // 發送打開文件失敗
                    send(client_socket, "open_file_failed", 16, 0);
                    return 1;
                }

                // 打開文件
                std::cout << "Opening file: " << processed_input << std::endl;
                std::ifstream infile(processed_input, std::ios::binary);
                if (!infile)
                {
                    std::cerr << "找不到此文件: " << processed_input << "終止連線" << std::endl;
                    // 發送打開文件失敗
                    send(client_socket, "open_file_failed", 16, 0);
                    return 1;
                }

                // 發送打開文件成功
                send(client_socket, "open_file_success", 17, 0);

                // 接收伺服器的確認訊息
                memset(buffer, 0, 4096);
                bytes_received = recv(client_socket, buffer, 4096, 0);
                // 如果收到"File opened successfully"，代表server端讀取文件成功
                if (bytes_received > 0 && std::string(buffer, bytes_received) == "File opened successfully")
                {
                    std::cout << "Server opened file successfully" << std::endl;
                }
                else
                {
                    std::cerr << "Server failed to open file" << std::endl;
                    return 1;
                }

                // 發送文件名
                send(client_socket, file_name.c_str(), file_name.size(), 0);
                std::cout << "Sent file name: " << file_name << std::endl;

                // 獲取檔案大小
                infile.seekg(0, std::ios::end);
                std::streamsize file_size = infile.tellg();
                infile.seekg(0, std::ios::beg);

                // 先發送檔案大小
                send(client_socket, &file_size, sizeof(file_size), 0);

                // 讀取文件並發送
                char file_buffer[CHUNCK_SIZE];
                std::streamsize total_bytes_sent = 0; // 目前已發送的字節數
                std::streamsize bytes_read;           // 每次讀取的字節數

                // 每次讀取CHUNCK_SIZE大小的文件數據，並發送
                while ((bytes_read = infile.read(file_buffer, CHUNCK_SIZE).gcount()) > 0)
                {
                    // 發送文件數據
                    ssize_t bytes_sent = send(client_socket, file_buffer, bytes_read, 0);
                    if (bytes_sent == -1)
                    {
                        std::cerr << "Failed to send file data" << std::endl;
                        break;
                    }
                    // 更新已發送的字節數
                    total_bytes_sent += bytes_sent;
                    std::cout << "Sent " << total_bytes_sent << " bytes" << std::endl;
                }

                // 關閉文件
                infile.close();

                // 接收並顯示伺服器的確認訊息
                memset(buffer, 0, 4096);
                bytes_received = recv(client_socket, buffer, 4096, 0);
                if (bytes_received > 0)
                {
                    std::cout << std::string(buffer, bytes_received) << std::endl;
                }
            }
            else if (user_input == "9") // 9. 離開
            {
                // 接收 "程式執行完畢！\n"
                memset(buffer, 0, 4096);
                bytes_received = recv(client_socket, buffer, 4096, 0);
                if (bytes_received > 0)
                {
                    std::cout << std::string(buffer, bytes_received) << std::endl;
                }
                break;
            }

            else // 未知選項
            {
                // 接收 "未知的選項，請重新選擇功能。\n"
                memset(buffer, 0, 4096);
                bytes_received = recv(client_socket, buffer, 4096, 0);
                if (bytes_received > 0)
                {
                    std::cout << std::string(buffer, bytes_received) << std::endl;
                }
            }
        }
    }

    close(client_socket); // 關閉客戶端 socket
    return 0;
}